@{
    Layout = null;
}
@using System.Collections.Generic
@using Newtonsoft.Json
@model CogDox.Models.CogDoxPageModel
<script>

    Ext.define('CogDox.ui.Config', {
        statics: {
            BASE_URL: '/cogdox'
        }
    });

    @{
        var dic = new Dictionary<string, object>();
        foreach(var lid in Model.ListManager.Lists)
        {
            var m = Model.ListManager.GetModel(lid);
            dic.Add(m.ListId, new {
                fields = m.Columns.Select(x => new {
                    name = x.DataField,
                    type = x.DataType
                   }),
                autoLoad = true, remoteFilter = true, remoteSort = true,
                proxy = new {
                    type = "ajax",
                    url = Url.Action("ListData", "List", new {id = m.ListId }),
                    reader = new {type = "json", root="Data", idProperty = "Id", totalProperty = "totalItems"}
                }
            });
        }
    }

    ///Contains data store definitions for all lists
    Ext.define('CogDox.ui.ListDataStores', {
        statics: {
            storeConfigs: @Html.Raw(JsonConvert.SerializeObject(dic)),
            createStore: function (listId, cfg) {
                if (cfg == null) cfg = {};
                var scfg = this.getStoreConfig(listId);
                if (Ext.isEmpty(scfg)) return null;
                var st = Ext.create('Ext.data.JsonStore', Ext.apply(scfg, cfg));
                return st;
            },
            getStoreConfig: function (listId) {
                return this.storeConfigs[listId];
            }
        }
    });

    Ext.define('CogDox.ui.BaseListGrid', {
        extend: "Ext.grid.Panel",
        listId: null,
        storeConfig: null,
        requires: [
            'CogDox.ui.ListDataStores'
        ],
        pageSize: 10,
        tbarItems: [],
        initComponent: function() {
            var me = this;
            if (Ext.isEmpty(this.store)) {
                if (!Ext.isEmpty(this.listId)) 
                {
                    this.store = CogDox.ui.ListDataStores.createStore(this.listId, {pageSize: this.pageSize});
                }
            }
            if (Ext.isEmpty(this.store)) throw "Store missing";
            this.store.getProxy().extraParams = {"ala" : "ma kota", "aquery" : "jest takie"};
            if (Ext.isEmpty(this.dockedItems)) {
                this.dockedItems = [
                    {
                        xtype: 'pagingtoolbar',
                        store: this.store,   
                        dock: 'top',
                        displayInfo: false,
                        items: [
                            {xtype: 'tbtext', itemId: 'displayItem'}
                        ].concat(Ext.isEmpty(this.tbarItems) ? [] : this.tbarItems)
                    }
                ]
                if (!Ext.isEmpty(this.tbarItems)) {
                    this.dockedItems[0].items.push(this.tbarItems);
                }
            }
            this.callParent(arguments);
        }
    });

    Ext.define('CogDox.ui.ListFilterPanel', {
        extend: 'Ext.panel.Panel',
        requires: [],
        header: false,
        collapseMode: 'mini',
        title: null,
        getCurrentFilter: function() {
        },
        loadFilter: function(flt) {
        },
        initComponent: function() {
            this.callParent(arguments);
        }
    });

    Ext.define('CogDox.ui.TODOListFilterPanel', {
        extend: 'CogDox.ui.ListFilterPanel',
        requires: [],

        initComponent: function() {
            var me = this;
            Ext.apply(this, {
                header: false, collapseMode: 'mini',
                items: Ext.create('Ext.form.Panel', {
                    xtype: 'form', border: false,
                    bodyStyle: 'padding:5px',
                    fieldDefaults: {
                        labelAlign: 'top',msgTarget: 'side'
                    },
                    defaults: {
                        border: false,padding: 3,xtype: 'panel',flex: 1,layout: 'anchor'
                    },
                    layout: 'hbox',
                    items: [
                        {
                            items: [{
                                xtype:'textfield',fieldLabel: 'First Name',anchor: '-5',name: 'first'
                            }, {
                                xtype:'textfield',fieldLabel: 'Company',anchor: '-5',name: 'company'
                            }]
                        }, {
                            items: [{
                                xtype:'textfield',fieldLabel: 'Last Name',anchor: '100%',name: 'last'
                            },{
                                xtype:'textfield',fieldLabel: 'Email',anchor: '100%',name: 'email',vtype:'email'
                            }]
                        }],
                    buttons: [
                        {text: 'Ok'},
                        {text: 'Filters'}
                    ]
                })
            });
            me.callParent(arguments);
        }
    });

    Ext.define('CogDox.ui.SearchGrid', {
        extend: 'Ext.panel.Panel',
        requires: ['CogDox.ui.ListDataStores'],
        layout: 'border',
        listId: '',
        searchPanelClass: null,
        searchPanelConfig: {},
        listGridClass: null,
        listGridConfig: {},
        showSearchPanel: function() {
            var p = this.getComponent('searchPnl');
            if (p.getCollapsed())
                p.expand();
            else
                p.collapse();
        },
        buildFilterMenu: function() {
            Ext.Ajax.request({
                url: CogDox.ui.Config.BASE_URL + "/List/GetListFilters",
                params: {listId: this.listId},
                success: function(resp, opts) {
                    var lst = Ext.JSON.decode(resp.responseText);
                }
            });
        },
        initComponent: function() {
            var me = this;
            var filterMnu = Ext.create('Ext.menu.Menu', {
                items: [{text: 'a ja to co?'}]
            });
            var fillMnu = function() {
                console.log('adding menu item');
                filterMnu.add(Ext.create('Ext.menu.Item', {text: 'Dodali mnie!'}));
                filterMnu.un('activate', fillMnu);
            };
            filterMnu.on('activate', fillMnu);
            
            var gridCfg = {
                region: 'center', itemId: 'theGrid', 
                tbarItems: [
                    {xtype: 'tbfill'},
                    {
                        text: 'Filtry', menu: filterMnu
                    },
                    {
                        xtype: 'button', text: '<<', border: true,
                        handler: function() {
                            me.showSearchPanel();
                        }
                    }
                ],
                listeners: {
                    itemclick: function(p, i) {
                        me.fireEvent('itemclick', me, i);
                    }
                }
            };
            Ext.apply(gridCfg, this.listGridConfig);
            var its = [
                Ext.create(this.listGridClass, gridCfg)
            ];
            if (!Ext.isEmpty(this.searchPanelClass)) {
                its.push(Ext.create(this.searchPanelClass, Ext.apply(this.searchPanelConfig, {
                    region: 'east', itemId: 'searchPnl', border: false, collapsible: true, 
                    collapsed: true
                })));
            }
            this.items = its;
            this.addEvents('itemclick', 'itemrightclick');
            this.callParent(arguments);
        }
    });

    

    @foreach(var lid in Model.ListManager.Lists)
    {
        var m = new CogDox.Models.JQGridListModel { List = Model.ListManager.GetModel(lid) };
        this.WriteLiteral(MvcExtensions.StripScriptTags(Html.Partial("Part/ExtListGrid", m)));
    }
    
    //po skrypcie
</script>